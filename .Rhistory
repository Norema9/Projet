summary(linear_model)
# loading the data into a dataframe
d5 <- read.csv('data.csv')
# Summary statistics for each type of measurement
summary_stats <- split(d5$measurement, d5$type)
print("Summary Statistics for Measurement Type 1:")
summary(summary_stats$'1')
print("Summary Statistics for Measurement Type 2:")
summary(summary_stats$'2')
print("Variance of the Measurement Type 1:")
sigma1_2 = var(summary_stats$'1')
print(sigma1_2)
print("Variance of the Measurement Type 2:")
sigma2_2 = var(summary_stats$'2')
print(sigma2_2)
# Data visualization (Histograms for each type of measurement)
par(mfrow = c(1,2))
hist(summary_stats$'1', main="Histogram for Measurement Type 1", xlab="Measurement Value")
hist(summary_stats$'2', main="Histogram for Measurement Type 2", xlab="Measurement Value")
par(mfrow = c(1,2))
boxplot(summary_stats$'1', main="Boxplots for Measurement Type 1")
boxplot(summary_stats$'2', main="Boxplots for Measurement Type 2")
# QQ plot for each type of measurement
par(mfrow=c(1,2))
qqnorm(summary_stats$'1', main="QQ Plot for Measurement Type 1")
qqline(summary_stats$'1')
qqnorm(summary_stats$'2', main="QQ Plot for Measurement Type 2")
qqline(summary_stats$'2')
mean_measurement_type_1 <- mean(d5$measurement[d5$type == '1' & d5$vehicle == 'A' & !is.na(d5$measurement)])
var_measurement_type_1 <- var(d5$measurement[d5$type == '1' & d5$vehicle == 'A' & !is.na(d5$measurement)])
mean_measurement_type_2 <- mean(d5$measurement[d5$type == '2' & d5$vehicle == 'A' & !is.na(d5$measurement)])
var_measurement_type_2 <- var(d5$measurement[d5$type == '2' & d5$vehicle == 'A' & !is.na(d5$measurement)])
# Display results
print("Estimates for Measurement Type 1:")
cat("Mean:", mean_measurement_type_1, "\n")
cat("Variance:", var_measurement_type_1, "\n")
print("Estimates for Measurement Type 2:")
cat("Mean:", mean_measurement_type_2, "\n")
cat("Variance:", var_measurement_type_2, "\n")
# The library which makes the bootstrapping
library(boot)
# The function which compute delta_asterisk
delta_asterisk_1 <- function(data, indices) {
resample <- data[indices]
return(mean(resample) - mean_measurement_type_1)
}
delta_asterisk_2 <- function(data, indices) {
resample <- data[indices]
return(mean(resample) - mean_measurement_type_2)
}
# Setting the number of resamples
num_resamples <- 1000
# Performing bootstrapping using the boot() function
boot_result_1 <- boot(data = d5$measurement[d5$type == '1' & d5$vehicle == 'A' & !is.na(d5$measurement)], statistic = delta_asterisk_1, R = num_resamples)
boot_result_2 <- boot(data = d5$measurement[d5$type == '2' & d5$vehicle == 'A' & !is.na(d5$measurement)], statistic = delta_asterisk_2, R = num_resamples)
# Calculate the 97.5th and 2.5th percentiles of the means
percentile_1_alpha_type_1 <- quantile(boot_result_1$t, probs = 0.975)
percentile_alpha_type_1 <- quantile(boot_result_1$t, probs = 0.025)
percentile_1_alpha_type_2 <- quantile(boot_result_2$t, probs = 0.975)
percentile_alpha_type_2 <- quantile(boot_result_2$t, probs = 0.025)
# Print the results
print("***********Confidence interval of the mean :*****************")
print("The percentiles for Type 1 :")
cat("The percentile_1_alpha_type_1 is equal to : ", percentile_1_alpha_type_1, "\n")
cat("The percentile_alpha_type_1 is equal to : ", percentile_alpha_type_1, "\n")
print("The percentiles for Type 2 :")
cat("The percentile_1_alpha_type_2 is equal to : ", percentile_1_alpha_type_2, "\n")
cat("The percentile_alpha_type_2 is equal to : ", percentile_alpha_type_2, "\n")
# The library which makes the bootstrapping
library(boot)
# The function which compute delta_asterisk
delta_asterisk_1 <- function(data, indices) {
resample <- data[indices]
return(sqrt(var(resample)) - sqrt(var_measurement_type_1))
}
delta_asterisk_2 <- function(data, indices){
resample <- data[indices]
return(sqrt(var(resample)) - sqrt(var_measurement_type_2))
}
# Setting the number of resamples
num_resamples <- 1000
# Performing bootstrapping using the boot() function
boot_result_1 <- boot(data = d5$measurement[d5$type == '1' & d5$vehicle == 'A' & !is.na(d5$measurement)], statistic = delta_asterisk_1, R = num_resamples)
boot_result_2 <- boot(data = d5$measurement[d5$type == '2' & d5$vehicle == 'A' & !is.na(d5$measurement)], statistic = delta_asterisk_2, R = num_resamples)
# Calculate the 97.5th and 2.5th percentiles of the means
percentile_1_alpha_type_1 <- quantile(boot_result_1$t, probs = 0.975)
percentile_alpha_type_1 <- quantile(boot_result_1$t, probs = 0.025)
percentile_1_alpha_type_2 <- quantile(boot_result_2$t, probs = 0.975)
percentile_alpha_type_2 <- quantile(boot_result_2$t, probs = 0.025)
# Print the results
print("***********Confidence interval of the standard deviation :*****************")
print("The percentiles for Type 1 :")
cat("The percentile_1_alpha_type_1 is equal to : ", percentile_1_alpha_type_1, "\n")
cat("The percentile_alpha_type_1 is equal to : ", percentile_alpha_type_1, "\n")
print("The percentiles for Type 2 :")
cat("The percentile_1_alpha_type_2 is equal to : ", percentile_1_alpha_type_2, "\n")
cat("The percentile_alpha_type_2 is equal to : ", percentile_alpha_type_2, "\n")
mean_measurement_type_1 <- mean(d5$measurement[d5$type == '1' & d5$vehicle == 'B' & !is.na(d5$measurement)])
var_measurement_type_1 <- var(d5$measurement[d5$type == '1' & d5$vehicle == 'B' & !is.na(d5$measurement)])
mean_measurement_type_2 <- mean(d5$measurement[d5$type == '2' & d5$vehicle == 'B' & !is.na(d5$measurement)])
var_measurement_type_2 <- var(d5$measurement[d5$type == '2' & d5$vehicle == 'B' & !is.na(d5$measurement)])
# Display results
print("Estimates for Measurement Type 1:")
cat("Mean:", mean_measurement_type_1, "\n")
cat("Variance:", var_measurement_type_1, "\n")
print("Estimates for Measurement Type 2:")
cat("Mean:", mean_measurement_type_2, "\n")
cat("Variance:", var_measurement_type_2, "\n")
# The library which makes the bootstrapping
library(boot)
# The function which compute delta_asterisk
delta_asterisk_1 <- function(data, indices) {
resample <- data[indices]
return(mean(resample) - mean_measurement_type_1)
}
delta_asterisk_2 <- function(data, indices) {
resample <- data[indices]
return(mean(resample) - mean_measurement_type_2)
}
# Setting the number of resamples
num_resamples <- 1000
# Performing bootstrapping using the boot() function
boot_result_1 <- boot(data = d5$measurement[d5$type == '1' & d5$vehicle == 'B' & !is.na(d5$measurement)], statistic = delta_asterisk_1, R = num_resamples)
boot_result_2 <- boot(data = d5$measurement[d5$type == '2' & d5$vehicle == 'B' & !is.na(d5$measurement)], statistic = delta_asterisk_2, R = num_resamples)
# Calculate the 97.5th and 2.5th percentiles of the means
percentile_1_alpha_type_1 <- quantile(boot_result_1$t, probs = 0.975)
percentile_alpha_type_1 <- quantile(boot_result_1$t, probs = 0.025)
percentile_1_alpha_type_2 <- quantile(boot_result_2$t, probs = 0.975)
percentile_alpha_type_2 <- quantile(boot_result_2$t, probs = 0.025)
# Print the results
print("***********Confidence interval of the mean :*****************")
print("The percentiles for Type 1 :")
cat("The percentile_1_alpha_type_1 is equal to : ", percentile_1_alpha_type_1, "\n")
cat("The percentile_alpha_type_1 is equal to : ", percentile_alpha_type_1, "\n")
print("The percentiles for Type 2 :")
cat("The percentile_1_alpha_type_2 is equal to : ", percentile_1_alpha_type_2, "\n")
cat("The percentile_alpha_type_2 is equal to : ", percentile_alpha_type_2, "\n")
# The library which makes the bootstrapping
library(boot)
# The function which compute delta_asterisk
delta_asterisk_1 <- function(data, indices) {
resample <- data[indices]
return(sqrt(var(resample)) - sqrt(var_measurement_type_1))
}
delta_asterisk_2 <- function(data, indices){
resample <- data[indices]
return(sqrt(var(resample)) - sqrt(var_measurement_type_2))
}
# Setting the number of resamples
num_resamples <- 1000
# Performing bootstrapping using the boot() function
boot_result_1 <- boot(data = d5$measurement[d5$type == '1' & d5$vehicle == 'B' & !is.na(d5$measurement)], statistic = delta_asterisk_1, R = num_resamples)
boot_result_2 <- boot(data = d5$measurement[d5$type == '2' & d5$vehicle == 'B' & !is.na(d5$measurement)], statistic = delta_asterisk_2, R = num_resamples)
# Calculate the 97.5th and 2.5th percentiles of the means
percentile_1_alpha_type_1 <- quantile(boot_result_1$t, probs = 0.975)
percentile_alpha_type_1 <- quantile(boot_result_1$t, probs = 0.025)
percentile_1_alpha_type_2 <- quantile(boot_result_2$t, probs = 0.975)
percentile_alpha_type_2 <- quantile(boot_result_2$t, probs = 0.025)
# Print the results
print("***********Confidence interval of the standard deviation :*****************")
print("The percentiles for Type 1 :")
cat("The percentile_1_alpha_type_1 is equal to : ", percentile_1_alpha_type_1, "\n")
cat("The percentile_alpha_type_1 is equal to : ", percentile_alpha_type_1, "\n")
print("The percentiles for Type 2 :")
cat("The percentile_1_alpha_type_2 is equal to : ", percentile_1_alpha_type_2, "\n")
cat("The percentile_alpha_type_2 is equal to : ", percentile_alpha_type_2, "\n")
mean_measurement_type_1 <- mean(d5$measurement[d5$type == '1' & d5$vehicle == 'C' & !is.na(d5$measurement)])
var_measurement_type_1 <- var(d5$measurement[d5$type == '1' & d5$vehicle == 'C' & !is.na(d5$measurement)])
mean_measurement_type_2 <- mean(d5$measurement[d5$type == '2' & d5$vehicle == 'C' & !is.na(d5$measurement)])
var_measurement_type_2 <- var(d5$measurement[d5$type == '2' & d5$vehicle == 'C' & !is.na(d5$measurement)])
# Display results
print("Estimates for Measurement Type 1:")
cat("Mean:", mean_measurement_type_1, "\n")
cat("Variance:", var_measurement_type_1, "\n")
print("Estimates for Measurement Type 2:")
cat("Mean:", mean_measurement_type_2, "\n")
cat("Variance:", var_measurement_type_2, "\n")
# The library which makes the bootstrapping
library(boot)
# The function which compute delta_asterisk
delta_asterisk_1 <- function(data, indices) {
resample <- data[indices]
return(mean(resample) - mean_measurement_type_1)
}
delta_asterisk_2 <- function(data, indices) {
resample <- data[indices]
return(mean(resample) - mean_measurement_type_2)
}
# Setting the number of resamples
num_resamples <- 1000
# Performing bootstrapping using the boot() function
boot_result_1 <- boot(data = d5$measurement[d5$type == '1' & d5$vehicle == 'C' & !is.na(d5$measurement)], statistic = delta_asterisk_1, R = num_resamples)
boot_result_2 <- boot(data = d5$measurement[d5$type == '2' & d5$vehicle == 'C' & !is.na(d5$measurement)], statistic = delta_asterisk_2, R = num_resamples)
# Calculate the 97.5th and 2.5th percentiles of the means
percentile_1_alpha_type_1 <- quantile(boot_result_1$t, probs = 0.975)
percentile_alpha_type_1 <- quantile(boot_result_1$t, probs = 0.025)
percentile_1_alpha_type_2 <- quantile(boot_result_2$t, probs = 0.975)
percentile_alpha_type_2 <- quantile(boot_result_2$t, probs = 0.025)
# Print the results
print("***********Confidence interval of the mean :*****************")
print("The percentiles for Type 1 :")
cat("The percentile_1_alpha_type_1 is equal to : ", percentile_1_alpha_type_1, "\n")
cat("The percentile_alpha_type_1 is equal to : ", percentile_alpha_type_1, "\n")
print("The percentiles for Type 2 :")
cat("The percentile_1_alpha_type_2 is equal to : ", percentile_1_alpha_type_2, "\n")
cat("The percentile_alpha_type_2 is equal to : ", percentile_alpha_type_2, "\n")
# The library which makes the bootstrapping
library(boot)
# The function which compute delta_asterisk
delta_asterisk_1 <- function(data, indices) {
resample <- data[indices]
return(sqrt(var(resample)) - sqrt(var_measurement_type_1))
}
delta_asterisk_2 <- function(data, indices){
resample <- data[indices]
return(sqrt(var(resample)) - sqrt(var_measurement_type_2))
}
# Setting the number of resamples
num_resamples <- 1000
# Performing bootstrapping using the boot() function
boot_result_1 <- boot(data = d5$measurement[d5$type == '1' & d5$vehicle == 'C' & !is.na(d5$measurement)], statistic = delta_asterisk_1, R = num_resamples)
boot_result_2 <- boot(data = d5$measurement[d5$type == '2' & d5$vehicle == 'C' & !is.na(d5$measurement)], statistic = delta_asterisk_2, R = num_resamples)
# Calculate the 97.5th and 2.5th percentiles of the means
percentile_1_alpha_type_1 <- quantile(boot_result_1$t, probs = 0.975)
percentile_alpha_type_1 <- quantile(boot_result_1$t, probs = 0.025)
percentile_1_alpha_type_2 <- quantile(boot_result_2$t, probs = 0.975)
percentile_alpha_type_2 <- quantile(boot_result_2$t, probs = 0.025)
# Print the results
print("***********Confidence interval of the standard deviation :*****************")
print("The percentiles for Type 1 :")
cat("The percentile_1_alpha_type_1 is equal to : ", percentile_1_alpha_type_1, "\n")
cat("The percentile_alpha_type_1 is equal to : ", percentile_alpha_type_1, "\n")
print("The percentiles for Type 2 :")
cat("The percentile_1_alpha_type_2 is equal to : ", percentile_1_alpha_type_2, "\n")
cat("The percentile_alpha_type_2 is equal to : ", percentile_alpha_type_2, "\n")
d8 <- read.csv('data.csv')
# Perform ANOVA for equality of expected values
anova_result_mesaurement <- aov(measurement ~ vehicle, data = d8)
summary(anova_result_mesaurement)
anova_result_type <- aov(type ~ vehicle, data = d8)
summary(anova_result_type)
d8 <- read.csv('data.csv')
# Perform ANOVA for equality of expected values
anova_result_mesaurement <- aov(measurement ~ vehicle, data = d8)
summary(anova_result_mesaurement)
anova_result_type <- aov(type ~ vehicle, data = d8)
summary(anova_result_type)
# Construct linear regression model
linear_model <- lm(measurement ~ type, data = d8)
# Summary of the model
summary(linear_model)
setwd("~/00.ETUDES/00.ECOLE_D_INGE/00.CYCLE_ING_FORMATION_INIT/00.3EME_ANNEE_INIT/00.A_COURS/03.STMO/03.ACTIVITIES/Projet")
setwd("~/00.ETUDES/00.ECOLE_D_INGE/00.CYCLE_ING_FORMATION_INIT/00.3EME_ANNEE_INIT/00.A_COURS/03.STMO/03.ACTIVITIES/Projet")
# Load the data
data <- read.csv("insurance.csv")
# Display the structure of the dataframe
str(data)
# Display the first few rows of the dataframe
head(data)
# Check the shape of the dataframe
data_shape <- dim(data)
# Display the result
cat("Number of rows:", data_shape[1], "\n")
cat("Number of columns:", data_shape[2], "\n")
# Check the data types of the features
feature_types <- sapply(data, class)
# Display the result
print(feature_types)
# Convert non-numerical features to categorical features
data$sex <- as.factor(data$sex)
data$smoker <- as.factor(data$smoker)
data$region <- as.factor(data$region)
data$children <- as.factor(data$children)
# Check the data types after conversion
feature_types_after_conversion <- sapply(data, class)
print(feature_types_after_conversion)
# Check for missing values in the entire dataframe
any_missing <- any(is.na(data))
# Check for missing values in each column
missing_per_column <- colSums(is.na(data))
# Display the results
cat("Any missing values in the dataframe:", any_missing, "\n")
cat("Missing values per column:\n")
print(missing_per_column)
library(visdat)
vis_dat(data)
library(ggplot2)
library(dplyr)
library(gridExtra)
# Custom function to calculate mode
calculate_mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Function to summarize and plot a feature
summary_plot <- function(feature_name, bin_width) {
# Extract the specified feature
feature <- data[[feature_name]]
# Summary statistics
mean_val <- mean(feature)
var_val <- var(feature)
q1_val <- quantile(feature, 0.25)
q3_val <- quantile(feature, 0.75)
mode_val <- calculate_mode(feature)
max_val <- max(feature)
min_val <- min(feature)
# Confidence Intervals
# Confidence interval for the mean
mean_ci <- t.test(feature)$conf.int
# Confidence interval for the variance
var_ci <- var.test(feature)$conf.int
custom_summary <- data.frame(
Mean = mean_val,
Mean_CI_Lower = mean_ci[1],
Mean_CI_Upper = mean_ci[2],
Variance = var_val,
Variance_CI_Lower = var_ci[1],
Variance_CI_Upper = var_ci[2],
Q1 = q1_val,
Q3 = q3_val,
Mode = mode_val,
Max = max_val,
Min = min_val
)
print(custom_summary)
# Plots
histogram_plot <- ggplot(data, aes(x = feature)) +
geom_histogram(aes(y = ..density..), binwidth = bin_width, fill = "lightblue", color = "black", alpha = 0.7) +
geom_density(color = "red", linetype = "dashed") +  # Add density curve
labs(title = paste("Histogram of", feature_name), x = feature_name, y = "Density") +
theme_minimal()
violin_plot <- ggplot(data, aes(x = factor(1), y = feature)) +
geom_violin(fill = "lightgreen", color = "black", alpha = 0.7) +
labs(title = paste("Violin Plot of", feature_name), x = "", y = feature_name) +
theme_minimal() +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())
boxplot_plot <- ggplot(data, aes(x = factor(1), y = feature)) +
geom_boxplot(fill = "lightcoral", color = "black", alpha = 0.7) +
labs(title = paste("Boxplot of", feature_name), x = "", y = feature_name) +
theme_minimal() +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())
cumulative_plot <- ggplot(data, aes(x = feature)) +
stat_ecdf(geom = "step", color = "blue") +
labs(title = paste("Cumulative Frequency Distribution of", feature_name), x = feature_name, y = "Cumulative Frequency") +
theme_minimal()
#  Arrange the plots in one figure
grid.arrange(histogram_plot, violin_plot, boxplot_plot, cumulative_plot, ncol = 2)
}
summary_plot("age", 5)
summary_plot("age", 5)
# Load the data
data <- read.csv("insurance.csv")
# Display the structure of the dataframe
str(data)
# Display the first few rows of the dataframe
head(data)
# Check the shape of the dataframe
data_shape <- dim(data)
# Display the result
cat("Number of rows:", data_shape[1], "\n")
cat("Number of columns:", data_shape[2], "\n")
# Check the data types of the features
feature_types <- sapply(data, class)
# Display the result
print(feature_types)
# Convert non-numerical features to categorical features
data$sex <- as.factor(data$sex)
data$smoker <- as.factor(data$smoker)
data$region <- as.factor(data$region)
data$children <- as.factor(data$children)
# Check the data types after conversion
feature_types_after_conversion <- sapply(data, class)
print(feature_types_after_conversion)
# Check for missing values in the entire dataframe
any_missing <- any(is.na(data))
# Check for missing values in each column
missing_per_column <- colSums(is.na(data))
# Display the results
cat("Any missing values in the dataframe:", any_missing, "\n")
cat("Missing values per column:\n")
print(missing_per_column)
library(visdat)
vis_dat(data)
library(ggplot2)
library(dplyr)
library(gridExtra)
# Custom function to calculate mode
calculate_mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Assuming 'data' is a global variable or defined somewhere accessible
# Function to summarize and plot a feature
summary_plot <- function(feature_name, bin_width) {
# Extract the specified feature
feature <- data[[feature_name]]
# Summary statistics
mean_val <- mean(feature)
var_val <- var(feature)
q1_val <- quantile(feature, 0.25)
q3_val <- quantile(feature, 0.75)
mode_val <- calculate_mode(feature)
max_val <- max(feature)
min_val <- min(feature)
# Confidence Intervals
# Confidence interval for the mean
mean_ci <- t.test(feature)$conf.int
# Confidence interval for the variance
var_ci <- var.test(y = feature)$conf.int  # Explicitly specify y = feature
custom_summary <- data.frame(
Mean = mean_val,
Mean_CI_Lower = mean_ci[1],
Mean_CI_Upper = mean_ci[2],
Variance = var_val,
Variance_CI_Lower = var_ci[1],
Variance_CI_Upper = var_ci[2],
Q1 = q1_val,
Q3 = q3_val,
Mode = mode_val,
Max = max_val,
Min = min_val
)
print(custom_summary)
# Plots
histogram_plot <- ggplot(data, aes(x = feature)) +
geom_histogram(aes(y = ..density..), binwidth = bin_width, fill = "lightblue", color = "black", alpha = 0.7) +
geom_density(color = "red", linetype = "dashed") +  # Add density curve
labs(title = paste("Histogram of", feature_name), x = feature_name, y = "Density") +
theme_minimal()
violin_plot <- ggplot(data, aes(x = factor(1), y = feature)) +
geom_violin(fill = "lightgreen", color = "black", alpha = 0.7) +
labs(title = paste("Violin Plot of", feature_name), x = "", y = feature_name) +
theme_minimal() +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())
boxplot_plot <- ggplot(data, aes(x = factor(1), y = feature)) +
geom_boxplot(fill = "lightcoral", color = "black", alpha = 0.7) +
labs(title = paste("Boxplot of", feature_name), x = "", y = feature_name) +
theme_minimal() +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())
cumulative_plot <- ggplot(data, aes(x = feature)) +
stat_ecdf(geom = "step", color = "blue") +
labs(title = paste("Cumulative Frequency Distribution of", feature_name), x = feature_name, y = "Cumulative Frequency") +
theme_minimal()
# Arrange the plots in one figure
grid.arrange(histogram_plot, violin_plot, boxplot_plot, cumulative_plot, ncol = 2)
}
summary_plot("bmi", 5)
summary_plot("age", 5)
library(ggplot2)
library(dplyr)
library(gridExtra)
# Custom function to calculate mode
calculate_mode <- function(x) {
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
# Assuming 'data' is a global variable or defined somewhere accessible
# Function to summarize and plot a feature
summary_plot <- function(feature_name, bin_width) {
# Extract the specified feature
feature <- data[[feature_name]]
# Summary statistics
mean_val <- mean(feature)
var_val <- var(feature)
q1_val <- quantile(feature, 0.25)
q3_val <- quantile(feature, 0.75)
mode_val <- calculate_mode(feature)
max_val <- max(feature)
min_val <- min(feature)
# Confidence Intervals
# Confidence interval for the mean
mean_ci <- t.test(x = feature)$conf.int
# Confidence interval for the variance
var_ci <- var.test(y = feature)$conf.int  # Explicitly specify y = feature
custom_summary <- data.frame(
Mean = mean_val,
Mean_CI_Lower = mean_ci[1],
Mean_CI_Upper = mean_ci[2],
Variance = var_val,
Variance_CI_Lower = var_ci[1],
Variance_CI_Upper = var_ci[2],
Q1 = q1_val,
Q3 = q3_val,
Mode = mode_val,
Max = max_val,
Min = min_val
)
print(custom_summary)
# Plots
histogram_plot <- ggplot(data, aes(x = feature)) +
geom_histogram(aes(y = ..density..), binwidth = bin_width, fill = "lightblue", color = "black", alpha = 0.7) +
geom_density(color = "red", linetype = "dashed") +  # Add density curve
labs(title = paste("Histogram of", feature_name), x = feature_name, y = "Density") +
theme_minimal()
violin_plot <- ggplot(data, aes(x = factor(1), y = feature)) +
geom_violin(fill = "lightgreen", color = "black", alpha = 0.7) +
labs(title = paste("Violin Plot of", feature_name), x = "", y = feature_name) +
theme_minimal() +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())
boxplot_plot <- ggplot(data, aes(x = factor(1), y = feature)) +
geom_boxplot(fill = "lightcoral", color = "black", alpha = 0.7) +
labs(title = paste("Boxplot of", feature_name), x = "", y = feature_name) +
theme_minimal() +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank())
cumulative_plot <- ggplot(data, aes(x = feature)) +
stat_ecdf(geom = "step", color = "blue") +
labs(title = paste("Cumulative Frequency Distribution of", feature_name), x = feature_name, y = "Cumulative Frequency") +
theme_minimal()
# Arrange the plots in one figure
grid.arrange(histogram_plot, violin_plot, boxplot_plot, cumulative_plot, ncol = 2)
}
summary_plot("age", 5)
